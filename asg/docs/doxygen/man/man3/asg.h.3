.TH "asg.h" 3 "Thu Apr 7 2022" "ANARI Scene Graph" \" -*- nroff -*-
.ad l
.nh
.SH NAME
asg.h
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <anari/anari\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBASGParam\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBASGAPI\fP   /*TODO*/"
.br
.ti -1c
.RI "#define \fBASG_FALSE\fP   0"
.br
.ti -1c
.RI "#define \fBASG_TRUE\fP   1"
.br
.ti -1c
.RI "#define \fBASG_ERROR_NO_ERROR\fP   0"
.br
.ti -1c
.RI "#define \fBASG_ERROR_INVALID_CHILD_ID\fP   5"
.br
.ti -1c
.RI "#define \fBASG_ERROR_INVALID_PARENT_ID\fP   6"
.br
.ti -1c
.RI "#define \fBASG_ERROR_INVALID_PATH_ID\fP   7"
.br
.ti -1c
.RI "#define \fBASG_ERROR_INSUFFICIENT_ARRAY_SIZE\fP   10"
.br
.ti -1c
.RI "#define \fBASG_ERROR_PARAM_NOT_FOUND\fP   50"
.br
.ti -1c
.RI "#define \fBASG_ERROR_MISSING_FILE_HANDLER\fP   100"
.br
.ti -1c
.RI "#define \fBASG_ERROR_FILE_IO_ERROR\fP   150"
.br
.ti -1c
.RI "#define \fBASG_ERROR_INVALID_LUT_ID\fP   700"
.br
.ti -1c
.RI "#define \fBASG_TYPE_OBJECT\fP   0"
.br
.ti -1c
.RI "#define \fBASG_TYPE_TRIANGLE_GEOMETRY\fP   1000"
.br
.ti -1c
.RI "#define \fBASG_TYPE_SPHERE_GEOMETRY\fP   1001"
.br
.ti -1c
.RI "#define \fBASG_TYPE_CYLINDER_GEOMETRY\fP   1004"
.br
.ti -1c
.RI "#define \fBASG_TYPE_MATERIAL\fP   1010"
.br
.ti -1c
.RI "#define \fBASG_TYPE_LIGHT\fP   1020"
.br
.ti -1c
.RI "#define \fBASG_TYPE_SURFACE\fP   1030"
.br
.ti -1c
.RI "#define \fBASG_TYPE_LOOKUP_TABLE1D\fP   1040"
.br
.ti -1c
.RI "#define \fBASG_TYPE_STRUCTURED_VOLUME\fP   1050"
.br
.ti -1c
.RI "#define \fBASG_TYPE_TRANSFORM\fP   1060"
.br
.ti -1c
.RI "#define \fBASG_TYPE_SELECT\fP   1070"
.br
.ti -1c
.RI "#define \fBASG_TYPE_CAMERA\fP   1080"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT8\fP   0"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT8_VEC1\fP   0"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT8_VEC2\fP   1"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT8_VEC3\fP   2"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT8_VEC4\fP   3"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT16\fP   10"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT16_VEC1\fP   10"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT16_VEC2\fP   11"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT16_VEC3\fP   12"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT16_VEC4\fP   13"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT32\fP   20"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT32_VEC1\fP   20"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT32_VEC2\fP   21"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT32_VEC3\fP   22"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT32_VEC4\fP   23"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT64\fP   30"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT64_VEC1\fP   30"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT64_VEC2\fP   31"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT64_VEC3\fP   32"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_INT64_VEC4\fP   33"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT8\fP   100"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT8_VEC1\fP   100"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT8_VEC2\fP   101"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT8_VEC3\fP   102"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT8_VEC4\fP   103"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT16\fP   110"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT16_VEC1\fP   110"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT16_VEC2\fP   111"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT16_VEC3\fP   112"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT16_VEC4\fP   113"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT32\fP   120"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT32_VEC1\fP   120"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT32_VEC2\fP   121"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT32_VEC3\fP   122"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT32_VEC4\fP   123"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT64\fP   130"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT64_VEC1\fP   130"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT64_VEC2\fP   131"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT64_VEC3\fP   132"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_UINT64_VEC4\fP   133"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_FLOAT32\fP   230"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_FLOAT32_VEC1\fP   230"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_FLOAT32_VEC2\fP   231"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_FLOAT32_VEC3\fP   232"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_FLOAT32_VEC4\fP   233"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_FLOAT64\fP   300"
.br
.ti -1c
.RI "#define \fBASG_DATA_TYPE_HANDLE\fP   666"
.br
.ti -1c
.RI "#define \fBASG_VISITOR_TRAVERSAL_TYPE_CHILDREN\fP   0"
.br
.ti -1c
.RI "#define \fBASG_VISITOR_TRAVERSAL_TYPE_PARENTS\fP   1"
.br
.ti -1c
.RI "#define \fBASG_MATRIX_FORMAT_COL_MAJOR\fP   0"
.br
.ti -1c
.RI "#define \fBASG_MATRIX_FORMAT_ROW_MAJOR\fP   1"
.br
.ti -1c
.RI "#define \fBASG_LUT_ID_DEFAULT_LUT\fP   0"
.br
.ti -1c
.RI "#define \fBASG_IO_FLAG_RESAMPLE_VOLUME_DIMS\fP   1"
.br
.ti -1c
.RI "#define \fBASG_IO_FLAG_RESAMPLE_VOXEL_TYPE\fP   2"
.br
.ti -1c
.RI "#define \fBASG_BUILD_WORLD_FLAG_FULL_REBUILD\fP   0xFFFFFFFFFFFFFFFFULL"
.br
.ti -1c
.RI "#define \fBASG_BUILD_WORLD_FLAG_GEOMETRIES\fP   0x0000000000000001ULL"
.br
.ti -1c
.RI "#define \fBASG_BUILD_WORLD_FLAG_VOLUMES\fP   0x0000000000000002ULL"
.br
.ti -1c
.RI "#define \fBASG_BUILD_WORLD_FLAG_MATERIALS\fP   0x0000000000000004ULL"
.br
.ti -1c
.RI "#define \fBASG_BUILD_WORLD_FLAG_LIGHTS\fP   0x0000000000000008ULL"
.br
.ti -1c
.RI "#define \fBASG_BUILD_WORLD_FLAG_TRANSFORMS\fP   0x0000000000000016ULL"
.br
.ti -1c
.RI "#define \fBASG_BUILD_WORLD_FLAG_LUTS\fP   0x0000000000000032ULL"
.br
.ti -1c
.RI "#define \fBASG_DFLT_PARAM\fP(P)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint8_t \fBASGBool_t\fP"
.br
.ti -1c
.RI "typedef int \fBASGError_t\fP"
.br
.ti -1c
.RI "typedef int \fBASGType_t\fP"
.br
.ti -1c
.RI "typedef int \fBASGDataType_t\fP"
.br
.ti -1c
.RI "typedef int \fBASGVisitorTraversalType_t\fP"
.br
.ti -1c
.RI "typedef int \fBASGMatrixFormat_t\fP"
.br
.ti -1c
.RI "typedef int \fBASGLutID\fP"
.br
.ti -1c
.RI "typedef uint64_t \fBASGBuildWorldFlags_t\fP"
.br
.ti -1c
.RI "typedef void(* \fBASGVisitFunc\fP) (struct _ASGVisitor *, struct _ASGObject *, void *)"
.br
.ti -1c
.RI "typedef void(* \fBASGFreeFunc\fP) (void *)"
.br
.ti -1c
.RI "typedef struct _ASGVisitor * \fBASGVisitor\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGObject\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGGeometry\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGTriangleGeometry\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGSphereGeometry\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGCylinderGeometry\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGMaterial\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGLight\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGSurface\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGSampler2D\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGLookupTable1D\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGStructuredVolume\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGTransform\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGSelect\fP"
.br
.ti -1c
.RI "typedef struct _ASGObject * \fBASGCamera\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "ASGAPI size_t \fBasgSizeOfDataType\fP (ASGDataType_t type)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam1i\fP (const char *name, int v1)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam2i\fP (const char *name, int v1, int v2)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam3i\fP (const char *name, int v1, int v2, int v3)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam4i\fP (const char *name, int v1, int v2, int v3, int v4)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam2iv\fP (const char *name, int *v)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam3iv\fP (const char *name, int *v)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam4iv\fP (const char *name, int *v)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam1f\fP (const char *name, float v1)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam2f\fP (const char *name, float v1, float v2)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam3f\fP (const char *name, float v1, float v2, float v3)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam4f\fP (const char *name, float v1, float v2, float v3, float v4)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam2fv\fP (const char *name, float *v)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam3fv\fP (const char *name, float *v)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParam4fv\fP (const char *name, float *v)"
.br
.ti -1c
.RI "ASGAPI \fBASGParam\fP \fBasgParamSampler2D\fP (const char *name, ASGSampler2D samp)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgParamGetValue\fP (\fBASGParam\fP param, void *mem)"
.br
.ti -1c
.RI "ASGAPI ASGVisitor \fBasgCreateVisitor\fP (void(*visitFunc)(ASGVisitor, ASGObject, void *), void *userData, ASGVisitorTraversalType_t traversalType)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgDestroyVisitor\fP (ASGVisitor visitor)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgVisitorApply\fP (ASGVisitor visitor, ASGObject obj)"
.br
.ti -1c
.RI "ASGAPI ASGSelect \fBasgNewSelect\fP (ASGBool_t defaultVisibility ASG_DFLT_PARAM(ASG_TRUE))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgSelectSetDefaultVisibility\fP (ASGSelect select, ASGBool_t defaultVisibility)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgSelectGetDefaultVisibility\fP (ASGSelect select, ASGBool_t *defaultVisibility)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgSelectSetChildVisible\fP (ASGSelect select, int childID, ASGBool_t visible)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgSelectGetChildVisible\fP (ASGSelect select, int childID, ASGBool_t *visible)"
.br
.ti -1c
.RI "ASGAPI ASGCamera \fBasgNewCamera\fP (const char *cameraType)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgCameraGetType\fP (ASGCamera camera, const char **cameraType)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgCameraSetParam\fP (ASGCamera camera, \fBASGParam\fP param)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgCameraGetParam\fP (ASGCamera camera, const char *paramName, \fBASGParam\fP *param)"
.br
.ti -1c
.RI "ASGAPI ASGMaterial \fBasgNewMaterial\fP (const char *materialType)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgMaterialGetType\fP (ASGMaterial material, const char **materialType)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgMaterialSetParam\fP (ASGMaterial material, \fBASGParam\fP param)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgMaterialGetParam\fP (ASGMaterial material, const char *paramName, \fBASGParam\fP *param)"
.br
.ti -1c
.RI "ASGAPI ASGLight \fBasgNewLight\fP (const char *lightType)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLightGetType\fP (ASGLight light, const char **lightType)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLightSetParam\fP (ASGLight light, \fBASGParam\fP param)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLightGetParam\fP (ASGLight light, const char *paramName, \fBASGParam\fP *param)"
.br
.ti -1c
.RI "ASGAPI ASGTriangleGeometry \fBasgNewTriangleGeometry\fP (float *vertices, float *vertexNormals, float *vertexColors, uint32_t numVertices, uint32_t *indices, uint32_t numIncidices, ASGFreeFunc freeVertices ASG_DFLT_PARAM(NULL), ASGFreeFunc freeNormals ASG_DFLT_PARAM(NULL), ASGFreeFunc freeColors ASG_DFLT_PARAM(NULL), ASGFreeFunc freeIndices ASG_DFLT_PARAM(NULL))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTriangleGeometryGetVertices\fP (ASGTriangleGeometry geom, float **vertices)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTriangleGeometryGetVertexNormals\fP (ASGTriangleGeometry geom, float **vertexNormals)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTriangleGeometryGetVertexColors\fP (ASGTriangleGeometry geom, float **vertexColors)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTriangleGeometryGetNumVertices\fP (ASGTriangleGeometry geom, uint32_t *numVertices)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTriangleGeometryGetIndices\fP (ASGTriangleGeometry geom, uint32_t **indices)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTriangleGeometryGetNumIndices\fP (ASGTriangleGeometry geom, uint32_t *numIndices)"
.br
.ti -1c
.RI "ASGAPI ASGSphereGeometry \fBasgNewSphereGeometry\fP (float *vertices, float *radii, float *vertexColors, uint32_t numVertices, uint32_t *indices, uint32_t numIndices, float defaultRadius ASG_DFLT_PARAM(1\&.f), ASGFreeFunc freeVertices ASG_DFLT_PARAM(NULL), ASGFreeFunc freeRadii ASG_DFLT_PARAM(NULL), ASGFreeFunc freeColors ASG_DFLT_PARAM(NULL), ASGFreeFunc freeIndices ASG_DFLT_PARAM(NULL))"
.br
.ti -1c
.RI "ASGAPI ASGCylinderGeometry \fBasgNewCylinderGeometry\fP (float *vertices, float *radii, float *vertexColors, uint8_t *caps, uint32_t numVertices, uint32_t *indices, uint32_t numIndices, float defaultRadius ASG_DFLT_PARAM(1\&.f), ASGFreeFunc freeVertices ASG_DFLT_PARAM(NULL), ASGFreeFunc freeRadii ASG_DFLT_PARAM(NULL), ASGFreeFunc freeColors ASG_DFLT_PARAM(NULL), ASGFreeFunc freeCaps ASG_DFLT_PARAM(NULL), ASGFreeFunc freeIndices ASG_DFLT_PARAM(NULL))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgGeometryComputeBounds\fP (ASGGeometry geom, float *minX, float *minY, float *minZ, float *maxX, float *maxY, float *maxZ)"
.br
.ti -1c
.RI "ASGAPI ASGSurface \fBasgNewSurface\fP (ASGGeometry geom, ASGMaterial mat)"
.br
.ti -1c
.RI "ASGAPI ASGGeometry \fBasgSurfaceGetGeometry\fP (ASGSurface surf, ASGGeometry *geom)"
.br
.ti -1c
.RI "ASGAPI ASGMaterial \fBasgSurfaceGetMaterial\fP (ASGSurface surf, ASGMaterial *mat)"
.br
.ti -1c
.RI "ASGAPI ASGTransform \fBasgNewTransform\fP (float initialMatrix[12], ASGMatrixFormat_t format ASG_DFLT_PARAM(ASG_MATRIX_FORMAT_COL_MAJOR))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTransformSetMatrix\fP (ASGTransform trans, float matrix[12])"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTransformGetMatrix\fP (ASGTransform trans, float matrix[12])"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTransformRotate\fP (ASGTransform trans, float axis[3], float angleInRadians)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgTransformTranslate\fP (ASGTransform trans, float xyz[3])"
.br
.ti -1c
.RI "ASGAPI ASGLookupTable1D \fBasgNewLookupTable1D\fP (float *rgb, float *alpha, int32_t numEntries, ASGFreeFunc freeRGB ASG_DFLT_PARAM(NULL), ASGFreeFunc freeAlpha ASG_DFLT_PARAM(NULL))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLookupTable1DGetRGB\fP (ASGLookupTable1D lut, float **rgb)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLookupTable1DGetAlpha\fP (ASGLookupTable1D lut, float **alpha)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLookupTable1DGetNumEntries\fP (ASGLookupTable1D lut, int32_t *numEntries)"
.br
.ti -1c
.RI "ASGAPI ASGStructuredVolume \fBasgNewStructuredVolume\fP (void *data, int32_t width, int32_t height, int32_t depth, ASGDataType_t type, ASGFreeFunc freeData ASG_DFLT_PARAM(NULL))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeGetData\fP (ASGStructuredVolume vol, void **data)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeGetDims\fP (ASGStructuredVolume vol, int32_t *width, int32_t *height, int32_t *depth)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeGetDatatype\fP (ASGStructuredVolume vol, ASGDataType_t *type)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeSetRange\fP (ASGStructuredVolume vol, float rangeMin, float rangeMax)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeGetRange\fP (ASGStructuredVolume vol, float *rangeMin, float *rangeMax)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeSetDist\fP (ASGStructuredVolume, float distX, float distY, float distZ)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeGetDist\fP (ASGStructuredVolume, float *distX, float *distY, float *distZ)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeSetLookupTable1D\fP (ASGStructuredVolume vol, ASGLookupTable1D lut)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgStructuredVolumeGetLookupTable1D\fP (ASGStructuredVolume vol, ASGLookupTable1D *lut)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLoadASSIMP\fP (ASGObject obj, const char *fileName, uint64_t flags)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLoadPBRT\fP (ASGObject obj, const char *fileName, uint64_t flags)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgLoadVOLKIT\fP (ASGStructuredVolume vol, const char *fileName, uint64_t flags)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgMakeMarschnerLobb\fP (ASGStructuredVolume vol)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgMakeDefaultLUT1D\fP (ASGLookupTable1D lut, ASGLutID lutID)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgMakeMatte\fP (ASGMaterial *material, float kd[3], ASGSampler2D mapKD ASG_DFLT_PARAM(NULL))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgMakePointLight\fP (ASGLight *light, float position[3], float color[3], float intensity ASG_DFLT_PARAM(1\&.f))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgComputeBounds\fP (ASGObject obj, float *minX, float *minY, float *minZ, float *maxX, float *maxY, float *maxZ, uint64_t nodeMask ASG_DFLT_PARAM(0))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgPickObject\fP (ASGObject obj, ASGCamera camera, uint32_t x, uint32_t y, uint32_t frameSizeX, uint32_t frameSizeY, ASGObject *pickedObject, uint64_t nodeMask ASG_DFLT_PARAM(0))"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgBuildANARIWorld\fP (ASGObject obj, ANARIDevice device, ANARIWorld world, ASGBuildWorldFlags_t flags ASG_DFLT_PARAM(ASG_BUILD_WORLD_FLAG_FULL_REBUILD), uint64_t nodeMask ASG_DFLT_PARAM(0))"
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "ASGAPI ASGObject \fBasgNewObject\fP ()"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgRelease\fP (ASGObject obj)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgRetain\fP (ASGObject obj)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgGetType\fP (ASGObject obj, ASGType_t *type)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectSetName\fP (ASGObject obj, const char *name)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectGetName\fP (ASGObject obj, const char **name)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectAddChild\fP (ASGObject obj, ASGObject child)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectSetChild\fP (ASGObject obj, int childID, ASGObject child)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectGetChild\fP (ASGObject obj, int childID, ASGObject *child)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectGetChildren\fP (ASGObject obj, ASGObject *children, int *numChildren)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectRemoveChild\fP (ASGObject obj, ASGObject child)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectRemoveChildAt\fP (ASGObject obj, int childID)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectGetParent\fP (ASGObject obj, int parentID, ASGObject *parent)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectGetParents\fP (ASGObject obj, ASGObject *parents, int *numParents)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectGetChildPaths\fP (ASGObject obj, ASGObject target, ASGObject **paths, int **pathLengths, int *numPaths)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectGetParentPaths\fP (ASGObject obj, ASGObject target, ASGObject **paths, int **pathLengths, int *numPaths)"
.br
.ti -1c
.RI "ASGAPI ASGError_t \fBasgObjectAccept\fP (ASGObject obj, ASGVisitor visitor)"
.br
.in -1c
.in -1c
.SH "Detailed Description"
.PP 
ANARI Scene Graph (ASG) C99 API 
.SH "Function Documentation"
.PP 
.SS "ASGAPI ASGError_t asgBuildANARIWorld (ASGObject obj, ANARIDevice device, ANARIWorld world, ASGBuildWorldFlags_t flags  ASG_DFLT_PARAMASG_BUILD_WORLD_FLAG_FULL_REBUILD, uint64_t nodeMask  ASG_DFLT_PARAM0)"
Build ANARI world from ASG subgraph Visits the subgraph induced by
.PP
\fBParameters\fP
.RS 4
\fIobj\fP and updates the ANARI world accordingly\&. The routine tries to only update those nodes that have the dirty flag set 
.RE
.PP

.SS "ASGAPI ASGObject asgNewObject ()"
#defgroup ASGObject Ref-counted objects These are the base type that scene graphs are composed of; objects follow the same ref counting semantics as ANARI\&. Every object in the scene graph derives from this common object type\&. Constructor functions are denoted asgNewXXX(), where XXX is the name of the type; this naming scheme indicates that the type is derived from ASGObject 
.SH "Author"
.PP 
Generated automatically by Doxygen for ANARI Scene Graph from the source code\&.
